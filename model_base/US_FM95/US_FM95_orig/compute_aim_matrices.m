% compute_aim _matrices()
%     This script will compute the G and H matrices.

  g = zeros(41, 82);
  h = zeros(41, 902);

  g(1682) = g(1682) + 1;
  g(1) = g(1) - (xgap1*1);
  g(411) = g(411) - (xgap2*1);
  g(247) = g(247) - (xgap3*1);
  g(288) = g(288) - (xgap4*1);
  g(329) = g(329) - (xgap5*1);
  g(3322) = g(3322) - 1;
  g(1765) = g(1765) + 1;
  g(84) = g(84) - (cofintintb1*1);
  g(1724) = g(1724) - (cofintinf0*1);
  g(43) = g(43) - (cofintinfb1*1);
  g(658) = g(658) - (cofintinfb2*1);
  g(699) = g(699) - (cofintinfb3*1);
  g(1683) = g(1683) - (cofintout*1);
  g(2) = g(2) - (cofintoutb1*1);
  g(3282) = g(3282) - 1;
  g(2012) = g(2012) + 1;
  g(1766) = g(1766) - 1;
  h(3406) = h(3406) - (-1.00000000*1);
  g(1767) = g(1767) + 1;
  g(1972) = g(1972) - 1;
  g(1972) = g(1972) - (-1.00000000*(16.00000000*(-1.00000000*1)));
  h(3407) = h(3407) + (-1.00000000*1);
  h(3653) = h(3653) - (-1.00000000*(16.00000000*1));
  g(1768) = g(1768) + 1;
  g(1932) = g(1932) - 1;
  g(1932) = g(1932) - (-1.00000000*(40.00000000*(-1.00000000*1)));
  h(3408) = h(3408) + (-1.00000000*1);
  h(3613) = h(3613) - (-1.00000000*(40.00000000*1));
  g(2753) = g(2753) + 1;
  g(1851) = g(1851) + (-1.00000000*1);
  g(2056) = g(2056) - (0.25000000*1);
  g(1687) = g(1687) - (0.25000000*(cy*1));
  g(2056) = g(2056) - ((1.50000000*slope)*1);
  g(1687) = g(1687) - ((1.50000000*slope)*(cy*1));
  g(3245) = g(3245) - 1;
  h(3737) = h(3737) - (0.25000000*1);
  h(3368) = h(3368) - (0.25000000*(cy*1));
  h(3737) = h(3737) - ((0.50000000*slope)*1);
  h(3368) = h(3368) - ((0.50000000*slope)*(cy*1));
  h(5418) = h(5418) - (0.25000000*1);
  h(5049) = h(5049) - (0.25000000*(cy*1));
  h(5418) = h(5418) - ((-1.00000000*(0.50000000*slope))*1);
  h(5049) = h(5049) - ((-1.00000000*(0.50000000*slope))*(cy*1));
  h(7099) = h(7099) - (0.25000000*1);
  h(6730) = h(6730) - (0.25000000*(cy*1));
  h(7099) = h(7099) - ((-1.00000000*(1.50000000*slope))*1);
  h(6730) = h(6730) - ((-1.00000000*(1.50000000*slope))*(cy*1));
  g(1852) = g(1852) + 1;
  g(2754) = g(2754) - (0.25000000*1);
  g(2754) = g(2754) - ((1.50000000*slope)*1);
  g(1073) = g(1073) - (0.25000000*1);
  g(1073) = g(1073) - ((0.50000000*slope)*1);
  g(1114) = g(1114) - (0.25000000*1);
  g(1114) = g(1114) - ((-1.00000000*(0.50000000*slope))*1);
  g(1155) = g(1155) - (0.25000000*1);
  g(1155) = g(1155) - ((-1.00000000*(1.50000000*slope))*1);
  g(2058) = g(2058) + 1;
  g(2755) = g(2755) - (0.25000000*1);
  g(1853) = g(1853) - (0.25000000*(-1.00000000*1));
  g(2755) = g(2755) - ((1.50000000*slope)*1);
  g(1853) = g(1853) - ((1.50000000*slope)*(-1.00000000*1));
  g(1074) = g(1074) - (0.25000000*1);
  g(172) = g(172) - (0.25000000*(-1.00000000*1));
  g(1074) = g(1074) - ((0.50000000*slope)*1);
  g(172) = g(172) - ((0.50000000*slope)*(-1.00000000*1));
  g(1115) = g(1115) - (0.25000000*1);
  g(1197) = g(1197) - (0.25000000*(-1.00000000*1));
  g(1115) = g(1115) - ((-1.00000000*(0.50000000*slope))*1);
  g(1197) = g(1197) - ((-1.00000000*(0.50000000*slope))*(-1.00000000*1));
  g(1156) = g(1156) - (0.25000000*1);
  g(1238) = g(1238) - (0.25000000*(-1.00000000*1));
  g(1156) = g(1156) - ((-1.00000000*(1.50000000*slope))*1);
  g(1238) = g(1238) - ((-1.00000000*(1.50000000*slope))*(-1.00000000*1));
  g(1731) = g(1731) + 1;
  g(1854) = g(1854) - (4.00000000*1);
  g(173) = g(173) - (4.00000000*(-1.00000000*1));
  g(1896) = g(1896) + 1;
  g(1732) = g(1732) - (0.25000000*1);
  g(51) = g(51) - (0.25000000*1);
  g(666) = g(666) - (0.25000000*1);
  g(707) = g(707) - (0.25000000*1);
  g(1815) = g(1815) + 1;
  g(1774) = g(1774) - 1;
  g(93) = g(93) - (-1.00000000*1);
  g(2103) = g(2103) + 1;
  g(12) = g(12) - 1;
  g(2145) = g(2145) + 1;
  g(423) = g(423) - 1;
  g(2187) = g(2187) + 1;
  g(465) = g(465) - 1;
  g(2229) = g(2229) + 1;
  g(97) = g(97) - 1;
  g(2271) = g(2271) + 1;
  g(549) = g(549) - 1;
  g(2313) = g(2313) + 1;
  g(591) = g(591) - 1;
  g(2355) = g(2355) + 1;
  g(59) = g(59) - 1;
  g(2397) = g(2397) + 1;
  g(675) = g(675) - 1;
  g(2439) = g(2439) + 1;
  g(717) = g(717) - 1;
  g(2481) = g(2481) + 1;
  g(759) = g(759) - 1;
  g(2523) = g(2523) + 1;
  g(801) = g(801) - 1;
  g(2565) = g(2565) + 1;
  g(843) = g(843) - 1;
  g(2607) = g(2607) + 1;
  g(885) = g(885) - 1;
  g(2649) = g(2649) + 1;
  g(927) = g(927) - 1;
  g(2691) = g(2691) + 1;
  g(969) = g(969) - 1;
  g(2733) = g(2733) + 1;
  g(1011) = g(1011) - 1;
  g(2816) = g(2816) + 1;
  g(1094) = g(1094) - 1;
  g(2858) = g(2858) + 1;
  g(1136) = g(1136) - 1;
  g(2900) = g(2900) + 1;
  g(194) = g(194) - 1;
  g(2942) = g(2942) + 1;
  g(1220) = g(1220) - 1;
  g(2984) = g(2984) + 1;
  g(1262) = g(1262) - 1;
  g(3026) = g(3026) + 1;
  h(8479) = h(8479) - 1;
  g(3068) = g(3068) + 1;
  h(15204) = h(15204) - 1;
  g(3110) = g(3110) + 1;
  h(21929) = h(21929) - 1;
  g(3152) = g(3152) + 1;
  h(28654) = h(28654) - 1;
  g(3194) = g(3194) + 1;
  h(35379) = h(35379) - 1;
  g(3236) = g(3236) + 1;
  g(1555) = g(1555) - 1;
  g(3278) = g(3278) + 1;
  g(3237) = g(3237) - (0.00000000*1);
  g(3320) = g(3320) + 1;
  g(3238) = g(3238) - (0.00000000*1);
  g(3362) = g(3362) + 1;
  g(3239) = g(3239) - (0.00000000*1);

  cofg = g;
  cofh = h;
